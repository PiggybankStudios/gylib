/*
File:   gy_imgui_helpers.h
Author: Taylor Robbins
Date:   03\11\2024
Description:
	** This file adds a bunch of helper functions to convert between Dear ImGui types
	** and GyLib types. It is not included by default in gy.h but should be included
	** AFTER you include imgui.h
*/

#ifndef _GY_IMGUI_HELPERS_H
#define _GY_IMGUI_HELPERS_H

#define START_IMGUI_NAMESPACE namespace ImGui {
#define END_IMGUI_NAMESPACE }

// +--------------------------------------------------------------+
// |                         Header Only                          |
// +--------------------------------------------------------------+
#ifdef GYLIB_HEADER_ONLY
	#ifdef _GY_VECTORS_H
	ImVec4 ToImVec4(v4 vector);
	v4 FromImVec4(ImVec4 vector);
	#endif //_GY_VECTORS_H
	#ifdef _GY_COLORS_H
	u32 ToImCol32(Color_t color);
	Color_t FromImCol32(u32 colorU32);
	ImVec4 ToImVec4(Color_t color);
	#endif //_GY_COLORS_H
#else

// +--------------------------------------------------------------+
// |                     gy_vectors.h Helpers                     |
// +--------------------------------------------------------------+
#ifdef _GY_VECTORS_H
ImVec4 ToImVec4(v4 vector)
{
	return ImVec4(vector.x, vector.y, vector.z, vector.w);
}
v4 FromImVec4(ImVec4 vector)
{
	return NewVec4(vector.x, vector.y, vector.z, vector.w);
}
#endif //_GY_VECTORS_H

// +--------------------------------------------------------------+
// |                     gy_colors.h Helpers                      |
// +--------------------------------------------------------------+
#ifdef _GY_COLORS_H
u32 ToImCol32(Color_t color)
{
	return IM_COL32(color.r, color.g, color.b, color.a);
}
Color_t FromImCol32(u32 colorU32)
{
	return NewColor(
		(u8)((colorU32 & (0xFF << IM_COL32_R_SHIFT)) >> IM_COL32_R_SHIFT),
		(u8)((colorU32 & (0xFF << IM_COL32_G_SHIFT)) >> IM_COL32_G_SHIFT),
		(u8)((colorU32 & (0xFF << IM_COL32_B_SHIFT)) >> IM_COL32_B_SHIFT),
		(u8)((colorU32 & (0xFF << IM_COL32_A_SHIFT)) >> IM_COL32_A_SHIFT)
	);
}
ImVec4 ToImVec4(Color_t color)
{
	return ImVec4(
		color.r / 255.0f,
		color.g / 255.0f,
		color.b / 255.0f,
		color.a / 255.0f
	);
}
#endif //_GY_COLORS_H

START_IMGUI_NAMESPACE



END_IMGUI_NAMESPACE

#endif // GYLIB_HEADER_ONLY

#endif //  _GY_IMGUI_HELPERS_H

// +--------------------------------------------------------------+
// |                   Autocomplete Dictionary                    |
// +--------------------------------------------------------------+
/*
@Defines
START_IMGUI_NAMESPACE
END_IMGUI_NAMESPACE
@Types
@Functions
ImVec4 ToImVec4(v4 vector)
v4 FromImVec4(ImVec4 vector)
u32 ToImCol32(Color_t color)
Color_t FromImCol32(u32 colorU32)
ImVec4 ToImVec4(Color_t color)
*/

// +--------------------------------------------------------------+
// |                 ImGui Autocomplete Reference                 |
// +--------------------------------------------------------------+
/*
@CommonFunctions
#define IM_COL32(R,G,B,A)
ImVec2 GetContentRegionAvail()
void PushID(const char* str_id)
void PushID(const char* str_id_begin, const char* str_id_end)
void PushID(const void* ptr_id)
void PushID(int int_id)
void PopID()
void PushStyleColor(ImGuiCol idx, ImU32 col)
void PushStyleColor(ImGuiCol idx, const ImVec4& col)
void PopStyleColor(int count = 1)
void Separator()
void SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f)
void NewLine()
void Spacing()
void Dummy(const ImVec2& size)
void Indent(float indent_w = 0.0f)
void Unindent(float indent_w = 0.0f)
void TextUnformatted(const char* text, const char* text_end = NULL)
void Text(const char* fmt, ...)
void TextV(const char* fmt, va_list args)
void TextColored(const ImVec4& col, const char* fmt, ...)
void TextColoredV(const ImVec4& col, const char* fmt, va_list args)
void TextDisabled(const char* fmt, ...)
void TextDisabledV(const char* fmt, va_list args)
void TextWrapped(const char* fmt, ...)
void TextWrappedV(const char* fmt, va_list args)
void LabelText(const char* label, const char* fmt, ...)
void LabelTextV(const char* label, const char* fmt, va_list args)
void BulletText(const char* fmt, ...)
void BulletTextV(const char* fmt, va_list args)
void SeparatorText(const char* label)
bool Button(const char* label, const ImVec2& size = ImVec2_Zero)
bool SmallButton(const char* label)
bool InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0)
bool ArrowButton(const char* str_id, ImGuiDir dir)
bool Checkbox(const char* label, bool* v)
bool InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2_Zero, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0)
bool InputInt2(const char* label, int* v, ImGuiInputTextFlags flags = 0)
bool InputInt3(const char* label, int* v, ImGuiInputTextFlags flags = 0)
bool InputInt4(const char* label, int* v, ImGuiInputTextFlags flags = 0)
bool InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0)
bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
bool InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
bool ColorEdit3(const char* label, float* col, ImGuiColorEditFlags flags = 0)
bool ColorEdit4(const char* label, float* col, ImGuiColorEditFlags flags = 0)
bool ColorPicker3(const char* label, float* col, ImGuiColorEditFlags flags = 0)
bool ColorPicker4(const char* label, float* col, ImGuiColorEditFlags flags = 0, const float* ref_col = NULL)
bool ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, const ImVec2& size = ImVec2_Zero)
bool RadioButton(const char* label, bool active)
bool RadioButton(const char* label, int* v, int v_button)
void ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL)bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0)
void EndCombo()
bool Combo(const char* label, int* current_item, const char* ImGuiGetter_f* getter, void* user_data, int items_count, int popup_max_height_in_items = -1)
bool TreeNode(const char* str_id, const char* fmt, ...)
@AllFunctions
#define IM_COL32(R,G,B,A)
ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL)
void DestroyContext(ImGuiContext* ctx = NULL)
ImGuiContext* GetCurrentContext()
void SetCurrentContext(ImGuiContext* ctx)
ImGuiIO& GetIO()
ImGuiStyle& GetStyle()
void NewFrame()
void EndFrame()
void Render()
ImDrawData* GetDrawData()
void ShowDemoWindow(bool* p_open = NULL)
void ShowMetricsWindow(bool* p_open = NULL)
void ShowDebugLogWindow(bool* p_open = NULL)
void ShowIDStackToolWindow(bool* p_open = NULL)
void ShowAboutWindow(bool* p_open = NULL)
void ShowStyleEditor(ImGuiStyle* ref = NULL)
bool ShowStyleSelector(const char* label)
void ShowFontSelector(const char* label)
void ShowUserGuide()
const char* GetVersion()
void StyleColorsDark(ImGuiStyle* dst = NULL)
void StyleColorsLight(ImGuiStyle* dst = NULL)
void StyleColorsClassic(ImGuiStyle* dst = NULL)
bool Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
void End()
bool BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0)
bool BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0)
void EndChild()
bool IsWindowAppearing()
bool IsWindowCollapsed()
bool IsWindowFocused(ImGuiFocusedFlags flags=0)
bool IsWindowHovered(ImGuiHoveredFlags flags=0)
ImDrawList* GetWindowDrawList()
ImVec2 GetWindowPos()
ImVec2 GetWindowSize()
float GetWindowWidth()
float GetWindowHeight()
void SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0))
void SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0)
void SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL)
void SetNextWindowContentSize(const ImVec2& size)
void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
void SetNextWindowFocus()
void SetNextWindowScroll(const ImVec2& scroll)
void SetNextWindowBgAlpha(float alpha)
void SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0)
void SetWindowSize(const ImVec2& size, ImGuiCond cond = 0)
void SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
void SetWindowFocus()
void SetWindowFontScale(float scale)
void SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0)
void SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0)
void SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0)
void SetWindowFocus(const char* name)
ImVec2 GetContentRegionAvail()
ImVec2 GetContentRegionMax()
ImVec2 GetWindowContentRegionMin()
ImVec2 GetWindowContentRegionMax()
float GetScrollX()
float GetScrollY()
void SetScrollX(float scroll_x)
void SetScrollY(float scroll_y)
float GetScrollMaxX()
float GetScrollMaxY()
void SetScrollHereX(float center_x_ratio = 0.5f)
void SetScrollHereY(float center_y_ratio = 0.5f)
void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)
void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)
void PushFont(ImFont* font)
void PopFont()
void PushStyleColor(ImGuiCol idx, ImU32 col)
void PushStyleColor(ImGuiCol idx, const ImVec4& col)
void PopStyleColor(int count = 1)
void PushStyleVar(ImGuiStyleVar idx, float val)
void PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
void PopStyleVar(int count = 1)
void PushTabStop(bool tab_stop)
void PopTabStop()
void PushButtonRepeat(bool repeat)
void PopButtonRepeat()
void PushItemWidth(float item_width)
void PopItemWidth()
void SetNextItemWidth(float item_width)
float CalcItemWidth()
void PushTextWrapPos(float wrap_local_pos_x = 0.0f)
void PopTextWrapPos()
ImFont* GetFont()
float GetFontSize()
ImVec2 GetFontTexUvWhitePixel()
ImU32 GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f)
ImU32 GetColorU32(const ImVec4& col)
ImU32 GetColorU32(ImU32 col, float alpha_mul = 1.0f)
const ImVec4& GetStyleColorVec4(ImGuiCol idx)
ImVec2 GetCursorScreenPos()
void SetCursorScreenPos(const ImVec2& pos)
ImVec2 GetCursorPos()
float GetCursorPosX()
float GetCursorPosY()
void SetCursorPos(const ImVec2& local_pos)
void SetCursorPosX(float local_x)
void SetCursorPosY(float local_y)
ImVec2 GetCursorStartPos()
void Separator()
void SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f)
void NewLine()
void Spacing()
void Dummy(const ImVec2& size)
void Indent(float indent_w = 0.0f)
void Unindent(float indent_w = 0.0f)
void BeginGroup()
void EndGroup()
void AlignTextToFramePadding()
float GetTextLineHeight()
float GetTextLineHeightWithSpacing()
float GetFrameHeight()
float GetFrameHeightWithSpacing()
void PushID(const char* str_id)
void PushID(const char* str_id_begin, const char* str_id_end)
void PushID(const void* ptr_id)
void PushID(int int_id)
void PopID()
ImGuiID GetID(const char* str_id)
ImGuiID GetID(const char* str_id_begin, const char* str_id_end)
ImGuiID GetID(const void* ptr_id)
void TextUnformatted(const char* text, const char* text_end = NULL)
void Text(const char* fmt, ...)
void TextV(const char* fmt, va_list args)
void TextColored(const ImVec4& col, const char* fmt, ...)
void TextColoredV(const ImVec4& col, const char* fmt, va_list args)
void TextDisabled(const char* fmt, ...)
void TextDisabledV(const char* fmt, va_list args)
void TextWrapped(const char* fmt, ...)
void TextWrappedV(const char* fmt, va_list args)
void LabelText(const char* label, const char* fmt, ...)
void LabelTextV(const char* label, const char* fmt, va_list args)
void BulletText(const char* fmt, ...)
void BulletTextV(const char* fmt, va_list args)
void SeparatorText(const char* label)
bool Button(const char* label, const ImVec2& size = ImVec2(0, 0))
bool SmallButton(const char* label)
bool InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0)
bool ArrowButton(const char* str_id, ImGuiDir dir)
bool Checkbox(const char* label, bool* v)
bool CheckboxFlags(const char* label, int* flags, int flags_value)
bool CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
bool RadioButton(const char* label, bool active)
bool RadioButton(const char* label, int* v, int v_button)
void ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL)
void Bullet()
void Image(ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
bool ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0)
void EndCombo()
bool Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1)
bool Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1)
bool Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int popup_max_height_in_items = -1)
bool DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0)
bool DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0)
bool DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0)
bool DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0)
bool SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0)
bool SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
bool SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
bool VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
bool VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
bool VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
bool InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
bool InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
bool InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0)
bool InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0)
bool InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0)
bool InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0)
bool InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0)
bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
bool InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
bool ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0)
bool ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0)
bool ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0)
bool ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL)
bool ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
void SetColorEditOptions(ImGuiColorEditFlags flags)
bool TreeNode(const char* label)
bool TreeNode(const char* str_id, const char* fmt, ...)
bool TreeNode(const void* ptr_id, const char* fmt, ...)
bool TreeNodeV(const char* str_id, const char* fmt, va_list args)
bool TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
bool TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
bool TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
bool TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
bool TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
void TreePush(const char* str_id)
void TreePush(const void* ptr_id)
void TreePop()
float GetTreeNodeToLabelSpacing()
bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0)
bool CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags = 0)
void SetNextItemOpen(bool is_open, ImGuiCond cond = 0)
bool Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
bool Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
bool BeginListBox(const char* label, const ImVec2& size = ImVec2(0, 0))
void EndListBox()
bool ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1)
bool ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int height_in_items = -1)
void PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
void PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
void PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
void PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
void Value(const char* prefix, bool b)
void Value(const char* prefix, int v)
void Value(const char* prefix, unsigned int v)
void Value(const char* prefix, float v, const char* float_format = NULL)
bool BeginMenuBar()
void EndMenuBar()
bool BeginMainMenuBar()
void EndMainMenuBar()
bool BeginMenu(const char* label, bool enabled = true)
void EndMenu()
bool MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true)
bool MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true)
bool BeginTooltip()
void EndTooltip()
void SetTooltip(const char* fmt, ...)
void SetTooltipV(const char* fmt, va_list args)
bool BeginItemTooltip()
void SetItemTooltip(const char* fmt, ...)
void SetItemTooltipV(const char* fmt, va_list args)
bool BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0)
bool BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
void EndPopup()
void OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0)
void OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags = 0)
void OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
void CloseCurrentPopup()
bool BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
bool BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
bool BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
bool IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0)
bool BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f)
void EndTable()
void TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f)
bool TableNextColumn()
bool TableSetColumnIndex(int column_n)
void TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0)
void TableSetupScrollFreeze(int cols, int rows)
void TableHeader(const char* label)
void TableHeadersRow()
void TableAngledHeadersRow()
ImGuiTableSortSpecs* TableGetSortSpecs()
int TableGetColumnCount()
int TableGetColumnIndex()
int TableGetRowIndex()
const char* TableGetColumnName(int column_n = -1)
ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1)
void TableSetColumnEnabled(int column_n, bool v)
void TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1)
void Columns(int count = 1, const char* id = NULL, bool border = true)
void NextColumn()
int GetColumnIndex()                                                   // get current column index
float GetColumnWidth(int column_index = -1)
void SetColumnWidth(int column_index, float width)
float GetColumnOffset(int column_index = -1)
void SetColumnOffset(int column_index, float offset_x)
int GetColumnsCount()
bool BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0)
void EndTabBar()
bool BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0)
void EndTabItem()
bool TabItemButton(const char* label, ImGuiTabItemFlags flags = 0)
void SetTabItemClosed(const char* tab_or_docked_window_label)
void LogToTTY(int auto_open_depth = -1)
void LogToFile(int auto_open_depth = -1, const char* filename = NULL)
void LogToClipboard(int auto_open_depth = -1)
void LogFinish()
void LogButtons()
void LogText(const char* fmt, ...)
void LogTextV(const char* fmt, va_list args)
bool BeginDragDropSource(ImGuiDragDropFlags flags = 0)
bool SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0)
void EndDragDropSource()
bool BeginDragDropTarget()
const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)
void EndDragDropTarget()
const ImGuiPayload* GetDragDropPayload()
void BeginDisabled(bool disabled = true)
void EndDisabled()
void PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
void PopClipRect()
void SetItemDefaultFocus()
void SetKeyboardFocusHere(int offset = 0)
void SetNextItemAllowOverlap()
bool IsItemHovered(ImGuiHoveredFlags flags = 0)
bool IsItemActive()
bool IsItemFocused()
bool IsItemClicked(ImGuiMouseButton mouse_button = 0)
bool IsItemVisible()
bool IsItemEdited()
bool IsItemActivated()
bool IsItemDeactivated()
bool IsItemDeactivatedAfterEdit()
bool IsItemToggledOpen()
bool IsAnyItemHovered()
bool IsAnyItemActive()
bool IsAnyItemFocused()
ImGuiID GetItemID()
ImVec2 GetItemRectMin()
ImVec2 GetItemRectMax()
ImVec2 GetItemRectSize()
ImGuiViewport* GetMainViewport()
ImDrawList* GetBackgroundDrawList()
ImDrawList* GetForegroundDrawList()
bool IsRectVisible(const ImVec2& size)
bool IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
double GetTime()
int GetFrameCount()
ImDrawListSharedData* GetDrawListSharedData()
const char* GetStyleColorName(ImGuiCol idx)
void SetStateStorage(ImGuiStorage* storage)
ImGuiStorage* GetStateStorage()
ImVec2 CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f)
ImVec4 ColorConvertU32ToFloat4(ImU32 in)
ImU32 ColorConvertFloat4ToU32(const ImVec4& in)
void ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
void ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
bool IsKeyDown(ImGuiKey key)
bool IsKeyPressed(ImGuiKey key, bool repeat = true)
bool IsKeyReleased(ImGuiKey key)
bool IsKeyChordPressed(ImGuiKeyChord key_chord)
int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
const char* GetKeyName(ImGuiKey key)
void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
bool IsMouseDown(ImGuiMouseButton button)
bool IsMouseClicked(ImGuiMouseButton button, bool repeat = false)
bool IsMouseReleased(ImGuiMouseButton button)
bool IsMouseDoubleClicked(ImGuiMouseButton button)
int GetMouseClickedCount(ImGuiMouseButton button)
bool IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true)
bool IsMousePosValid(const ImVec2* mouse_pos = NULL)
bool IsAnyMouseDown()
ImVec2 GetMousePos()
ImVec2 GetMousePosOnOpeningCurrentPopup()
bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f)
ImVec2 GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f)
void ResetMouseDragDelta(ImGuiMouseButton button = 0)
ImGuiMouseCursor GetMouseCursor()
void SetMouseCursor(ImGuiMouseCursor cursor_type)
void SetNextFrameWantCaptureMouse(bool want_capture_mouse)
const char* GetClipboardText()
void SetClipboardText(const char* text)
void LoadIniSettingsFromDisk(const char* ini_filename)
void LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0)
void SaveIniSettingsToDisk(const char* ini_filename)
const char* SaveIniSettingsToMemory(size_t* out_ini_size = NULL)
void DebugTextEncoding(const char* text)
void DebugFlashStyleColor(ImGuiCol idx)
void DebugStartItemPicker()
bool DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
void SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data = NULL)
void GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data)
void* MemAlloc(size_t size)
void MemFree(void* ptr)
*/